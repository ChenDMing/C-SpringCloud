<?xml version="1.0" encoding="UTF-8"?>

<!--
       scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration debug="false">

    <!--定义变量-->
    <property name="log_name"  value="springcloud-cache"/>
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="log_home"  value="/log/springcloud/auth"/>
    <!--日志级别:大于 INFO 的日志才能输出-->
    <property name="log_level" value="INFO"/>

    <contextName>${log_name}</contextName>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--按pattern指定的路径格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符,编码为UTF-8-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 定义一个日滚动（每天生成一份）的日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--根据时间滚动策略-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${log_home}/springcloud-auth-%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>60</MaxHistory>
            <!--文件大小必须跟policy匹配-->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符,编码为UTF-8-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 在日滚动文件中，强制只保存错误INFO级别以上的信息 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${log_level}</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <logger name="auth" level="INFO">
        <appender-ref ref="FILE"/>
    </logger>

    <!--打印sql日志-->
    <logger name="own.timer.dao" level="DEBUG" />

    <!-- 定义日志全局最低输出级别，同时向控制台和日滚动文件输出 -->
    <root level="INFO">
        <!--下面的都会执行-->
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>
